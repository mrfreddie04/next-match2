// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  passwordHash  String
  image         String?

  accounts      Account[]
  member        Member?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String      @id @default(cuid())  
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?     @db.Text
  access_token      String?     @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?     @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Member {
  id                String      @id @default(cuid())  
  userId            String      @unique
  name              String
  gender            String
  dateOfBirth       DateTime
  description       String
  city              String
  country           String
  image             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos            Photo[]
  sourceLikes       Like[] @relation("source")
  targetLikes       Like[] @relation("target")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}  

model Photo {
  id                String      @id @default(cuid())  
  memberId          String      
  url               String
  publicId          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}  

model Like {
  //id                String      @id @default(cuid())  
  sourceUserId    String      
  targetUserId    String      

  createdAt DateTime @default(now())

  sourceMember Member @relation(name: "source", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  targetMember Member @relation(name: "target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId,targetUserId])
}  